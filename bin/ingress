#!/usr/bin/python -B
"""Perform a number of Ingress related functions."""

import argparse
import logging

import app

from ingress import database
from ingress import bookmarks
from ingress import json
from ingress import geo
from ingress import routes


def main(app_parser):
    """Main."""
    parser = argparse.ArgumentParser(parents=[app_parser], description=__doc__)

    bm_parser = argparse.ArgumentParser(add_help=False)
    bm_parser.add_argument(
        '-b',
        '--bookmarks',
        action='store',
        required=True,
        help='IITC bookmarks json file to use')

    dt_parser = argparse.ArgumentParser(add_help=False)
    dt_parser.add_argument(
        '-d',
        '--drawtools',
        action='store',
        required=True,
        help='IITC drawtools json file to use')

    file_parser = argparse.ArgumentParser(add_help=False)
    file_parser.add_argument(
        '-f',
        '--filename',
        action='store',
        required=True,
        help='Any arbitrary file argument.')

    subparsers = parser.add_subparsers(
        title='commands', dest='name', help='subparser help')

    parser_import = subparsers.add_parser(
        'import',
        parents=[bm_parser],
        description=bookmarks.import_bookmarks.__doc__,
        help=bookmarks.import_bookmarks.__doc__)
    parser_import.set_defaults(func=bookmarks.import_bookmarks)

    parser_update = subparsers.add_parser(
        'update',
        parents=[bm_parser],
        description=geo.update.__doc__,
        help=geo.update.__doc__)
    parser_update.add_argument(
        '--noaddresses',
        action='store_false',
        dest='addresses',
        help='Disable updating addresses.')
    parser_update.add_argument(
        '--addresses', action='store_true', help='Enable updating addresses.')
    parser_update.add_argument(
        '--nodirections',
        action='store_false',
        dest='directions',
        help='Disable updating directions.')
    parser_update.add_argument(
        '--directions',
        action='store_true',
        help='Enable updating directions..')
    parser_update.set_defaults(func=geo.update)

    parser_bounds = subparsers.add_parser(
        'bounds',
        parents=[bm_parser, dt_parser],
        description=geo.bounds.__doc__,
        help=geo.bounds.__doc__)
    parser_bounds.set_defaults(func=geo.bounds)

    parser_trim = subparsers.add_parser(
        'trim',
        parents=[bm_parser, dt_parser],
        description=geo.trim.__doc__,
        help=geo.trim.__doc__)
    parser_trim.set_defaults(func=geo.trim)

    parser_routes = subparsers.add_parser(
        'routes',
        parents=[bm_parser],
        description=routes.route.__doc__,
        help=routes.route.__doc__)
    parser_routes.add_argument(
        '-w',
        '--walk-auto',
        action='store',
        type=int,
        help='Longest walk time to automatically accept.',
        default=300)
    parser_routes.set_defaults(func=routes.route)

    parser_clean_json = subparsers.add_parser(
        'clean_json',
        parents=[file_parser],
        description=json.clean.__doc__,
        help=json.clean.__doc__)
    parser_clean_json.set_defaults(func=json.clean)

    args = parser.parse_args()
    dbc = database.Database()
    logging.debug('Calling %s with %s', args.name, args)
    args.func(args, dbc)


if __name__ == '__main__':
    app.run(main)
