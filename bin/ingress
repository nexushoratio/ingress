#!/usr/bin/python -B
"""Perform a number of Ingress related functions."""

import argparse
import logging

import app

from ingress import database
from ingress import bookmarks
from ingress import json
from ingress import geo
from ingress import routes


def main(app_parser):
    """Main."""
    parser = argparse.ArgumentParser(
        parents=[app_parser],
        description='Perform a number of Ingress related functions.')

    bm_parser = argparse.ArgumentParser(add_help=False)
    bm_parser.add_argument(
        '-b',
        '--bookmarks',
        action='store',
        required=True,
        help='IITC bookmarks json file to use')

    file_parser = argparse.ArgumentParser(add_help=False)
    file_parser.add_argument(
        '-f',
        '--filename',
        action='store',
        required=True,
        help='Any arbitrary file argument.')

    subparsers = parser.add_subparsers(dest='name')

    parser_import = subparsers.add_parser(
        'import',
        parents=[bm_parser],
        help='Import portals from an IITC bookmark.')
    parser_import.set_defaults(func=bookmarks.import_bookmarks)

    parser_update_geo = subparsers.add_parser(
        'update-geo',
        parents=[bm_parser],
        help='Update locations and travel times by bookmark.')
    parser_update_geo.set_defaults(func=geo.update)

    parser_routes = subparsers.add_parser(
        'routes',
        parents=[bm_parser],
        help='Calculate an optimal route between portals.')

    parser_routes.add_argument(
        '-w',
        '--walk-auto',
        action='store',
        type=int,
        help='Longest walk time to automatically accept.',
        default=300)
    parser_routes.set_defaults(func=routes.route)

    parser_clean_json = subparsers.add_parser(
        'clean_json', parents=[file_parser], help='Clean up a json file.')
    parser_clean_json.set_defaults(func=json.clean)

    args = parser.parse_args()
    dbc = database.Database()
    logging.debug('Calling %s with %s', args.name, args)
    args.func(args, dbc)


if __name__ == '__main__':
    app.run(main)
